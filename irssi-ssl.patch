Index: src/core/network-openssl.c
===================================================================
--- src/core/network-openssl.c	(wersja 5094)
+++ src/core/network-openssl.c	(wersja 5095)
@@ -317,6 +317,9 @@
 		return NULL;
 	}
 
+	SSL_set_mode(ssl, SSL_MODE_ENABLE_PARTIAL_WRITE |
+			SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER);
+
 	chan = g_new0(GIOSSLChannel, 1);
 	chan->fd = fd;
 	chan->giochan = handle;
Index: src/core/network-openssl.c
===================================================================
--- src/core/network-openssl.c	(wersja 5106)
+++ src/core/network-openssl.c	(wersja 5107)
@@ -43,15 +43,14 @@
 	const char *hostname;
 } GIOSSLChannel;
 
-static SSL_CTX *ssl_ctx = NULL;
+static int ssl_inited = FALSE;
 
 static void irssi_ssl_free(GIOChannel *handle)
 {
 	GIOSSLChannel *chan = (GIOSSLChannel *)handle;
 	g_io_channel_unref(chan->giochan);
 	SSL_free(chan->ssl);
-	if (chan->ctx != ssl_ctx)
-		SSL_CTX_free(chan->ctx);
+	SSL_CTX_free(chan->ctx);
 	g_free(chan);
 }
 
@@ -375,14 +374,8 @@
 {
 	SSL_library_init();
 	SSL_load_error_strings();
+	ssl_inited = TRUE;
 
-	ssl_ctx = SSL_CTX_new(SSLv23_client_method());
-	if(!ssl_ctx)
-	{
-		g_error("Initialization of the SSL library failed");
-		return FALSE;
-	}
-
 	return TRUE;
 
 }
@@ -397,18 +390,20 @@
 
 	g_return_val_if_fail(handle != NULL, NULL);
 
-	if(!ssl_ctx && !irssi_ssl_init())
+	if(!ssl_inited && !irssi_ssl_init())
 		return NULL;
 
 	if(!(fd = g_io_channel_unix_get_fd(handle)))
 		return NULL;
 
+	ctx = SSL_CTX_new(SSLv23_client_method());
+	if (ctx == NULL) {
+		g_error("Could not allocate memory for SSL context");
+		return NULL;
+	}
+
 	if (mycert && *mycert) {
 		char *scert = NULL, *spkey = NULL;
-		if ((ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {
-			g_error("Could not allocate memory for SSL context");
-			return NULL;
-		}
 		scert = convert_home(mycert);
 		if (mypkey && *mypkey)
 			spkey = convert_home(mypkey);
@@ -425,10 +420,6 @@
 	if ((cafile && *cafile) || (capath && *capath)) {
 		char *scafile = NULL;
 		char *scapath = NULL;
-		if (! ctx && (ctx = SSL_CTX_new(SSLv23_client_method())) == NULL) {
-			g_error("Could not allocate memory for SSL context");
-			return NULL;
-		}
 		if (cafile && *cafile)
 			scafile = convert_home(cafile);
 		if (capath && *capath)
@@ -443,14 +434,15 @@
 		g_free(scafile);
 		g_free(scapath);
 		verify = TRUE;
+	} else {
+		if (!SSL_CTX_set_default_verify_paths(ctx))
+			g_warning("Could not load default certificates");
 	}
 
-	if (ctx == NULL)
-		ctx = ssl_ctx;
-
 	if(!(ssl = SSL_new(ctx)))
 	{
 		g_warning("Failed to allocate SSL structure");
+		SSL_CTX_free(ctx);
 		return NULL;
 	}
 
@@ -458,8 +450,7 @@
 	{
 		g_warning("Failed to associate socket to SSL stream");
 		SSL_free(ssl);
-		if (ctx != ssl_ctx)
-			SSL_CTX_free(ctx);
+		SSL_CTX_free(ctx);
 		return NULL;
 	}
 
Index: src/core/network-openssl.c
===================================================================
--- src/core/network-openssl.c	(wersja 5107)
+++ src/core/network-openssl.c	(wersja 5108)
@@ -374,6 +374,7 @@
 {
 	SSL_library_init();
 	SSL_load_error_strings();
+	OpenSSL_add_all_algorithms();
 	ssl_inited = TRUE;
 
 	return TRUE;
